# -*- coding: utf-8 -*-
"""Task 01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17Frqj_5Fjw2inDulnGvBV_CnbNr44T3D

**Task 1: Biostatistics and Ecological Statistics Visualization**

**1. Introduction**

This notebook is dedicated to the analysis and visualization of ecological and biostatistical data to identify key patterns and relationships. Such data typically encompass various factors, including environmental conditions, pollution levels, and species populations, which play a crucial role in understanding ecosystem health and dynamics. Potential relationships between variables within the dataset are explored and examined in greater depth. Key insights from each stage of the analysis are documented in the accompanying README file.

**Preliminaries**

Load the various packages required to complete the work and set up the matplotlib plotting environment.
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""**2. Data Loading and preprocessing**

Load the CSV file containing biostatistics and ecological data into a pandas Dataframe and display basic info about the dataset.
"""

# Load the CSV file into a pandas DataFrame
file_path = "/content/Tanvir_Arefin_Biostatistics_and_Ecological_Statistics_Visualization.csv"  # Replace with the path to your CSV file
data = pd.read_csv(file_path)

# Display basic information about the dataset
print("Dataset Information:")
print(data.info())

# Display the first few rows of the dataset for a quick overview
print("\nFirst 5 Rows of the Dataset:")
print(data.head())

# Check for missing values in each column
print("\nSummary of Missing Values:")
print(data.isnull().sum())

# Display the number of rows and columns in the dataset
print(f"\nThe dataset contains {data.shape[0]} rows and {data.shape[1]} columns.")

"""**3. Descriptive Statistics**

Calculate basic descriptive statistics (mean, median, min, max) for the columns related
to temperature, pollution level, and species population.
"""

def calculate_statistics(data, columns):
    stats = pd.DataFrame(columns=['Mean', 'Median', 'Min', 'Max'])
    for col in columns:
        stats.loc[col] = [
            data[col].mean(),
            data[col].median(),
            data[col].min(),
            data[col].max()
        ]
    return stats

def main():

    stats_columns = ['Temperature (\u00b0C)', 'Pollution_Level (ppm)', 'Species_Population']
    stats = calculate_statistics(data, stats_columns)

    print("\n===== Descriptive Statistics =====\n")
    print(stats.to_string())

# This is typically how you would call the main function
# when running the script
if __name__ == "__main__":
    main()

"""**4. Data Visualization**

o Plot the distribution of temperature, pollution level, and species population using
histograms.

o Create a box plot to visualize the spread of species population data across different
regions.

o Plot the trends of species population across time (use line plots).
"""

def plot_all_graphs(data, stats_columns):
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    for i, col in enumerate(stats_columns):
        sns.histplot(data[col], kde=True, bins=10, ax=axes[i // 2, i % 2])
        axes[i // 2, i % 2].set_title(f"Distribution of {col}")
        axes[i // 2, i % 2].set_xlabel(col)
        axes[i // 2, i % 2].set_ylabel("Frequency")
    sns.boxplot(x="Region", y="Species_Population", data=data, ax=axes[1, 1])
    axes[1, 1].set_title("Species Population by Region")
    axes[1, 1].set_xlabel("Region")
    axes[1, 1].set_ylabel("Species Population")
    plt.tight_layout()
    plt.show()

def plot_trends(data):
    plt.figure(figsize=(10, 6))
    for species in data['Species'].unique():
        species_data = data[data['Species'] == species]
        plt.plot(pd.to_datetime(species_data['Timestamp']), species_data['Species_Population'], label=species)
    plt.title("Species Population Trends Over Time")
    plt.xlabel("Time")
    plt.ylabel("Species Population")
    plt.legend()
    plt.show()

def main():
    # Assuming load_data and display_data_info are defined elsewhere
    stats_columns = ['Temperature (\u00b0C)', 'Pollution_Level (ppm)', 'Species_Population']
    stats = calculate_statistics(data, stats_columns)
    plot_all_graphs(data, stats_columns)
    plot_trends(data)

if __name__ == "__main__":
   main()

"""**5. Correlation**

Calculate and display the correlation between temperature, pollution level, and species
population.
"""

def calculate_correlation(data, columns):
    correlation_matrix = data[columns].corr()
    plt.figure(figsize=(8, 6))
    sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f")
    plt.title("Correlation Matrix")
    plt.show()

def main():
    stats_columns = ['Temperature (\u00b0C)', 'Pollution_Level (ppm)', 'Species_Population']
    calculate_correlation(data, stats_columns)  # Call only the correlation function

# This is typically how you would call the main function
# when running the script
if __name__ == "__main__":
    main()